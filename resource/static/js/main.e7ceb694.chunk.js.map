{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","resourcePath","window","location","href","split","_this2","fetch","then","Response","json","findresponse","setState","_this3","name","description","learningOutcome","organisers","type","provider","url","domains","attribute_types","map","item","key","id","title","learning_outcomes","competency_profile","profile","domain","push","Profile","react_default","a","createElement","competencies","competency","attributes","attribute","className","target","Parser","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7ceb694.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Parser from 'html-react-parser';\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            data: [],\n            resourcePath: window.location.href.split('?resourceid='),\n        };\n    }\n\n    componentDidMount(){\n        //fetch('http://competencymapper/api/v1/training-resources/krc?_format=json')\n        fetch('http://dev-competency-mapper.pantheonsite.io/api/v1/training-resources/all?_format=json')\n            .then((Response)=>Response.json())\n            .then((findresponse) =>\n            {\n                this.setState({data:findresponse})\n            });\n\n\n    }\n\n  render() {\n\n      let name = \"\";\n      let description = \"\";\n      let learningOutcome = \"\";\n      let organisers = \"\";\n      let type = \"\";\n      let provider = \"\";\n      let url = \"\";\n      let domains = [];\n      let attribute_types= [\"Knowledge\",\"Skills\",\"Attitude\"];\n\n      {this.state.data.map((item, key) => {\n              if(item.id == this.state.resourcePath[1] ){\n                name = item.title;\n                  url = item.url;\n                  description =   (item.description?item.description:\"\");\n                  learningOutcome =  (item.learning_outcomes?item.learning_outcomes:\"\");\n                  organisers = (item.organisers?item.organisers:\"\");\n                  //type = item.typeOnlineOrFacetoface;\n                  type = item.type;\n                  //provider = item.provider;\n                  provider = \"\";\n                  item.competency_profile.map((profile) =>{\n                    profile.domains.map((domain) =>{\n                        domains.push(domain.title);\n                    });\n                  });\n\n              }\n          }\n      )}\n\n      const Profile = this.state.data.map((item, key) => {\n          if(item.id == this.state.resourcePath[1]) {\n              return item.competency_profile.map((profile) => {\n                  return <ul>{\n                      profile.domains.map((domain)=> {\n                           return   <div>\n                                  <h4>{domain.title}</h4>\n                                  <ul>{domain.competencies.map((competency) =>\n                                      <li> {competency.title}\n                                          <ul>{attribute_types.map((type) =>\n                                                  <span>\n                                                {competency.attributes.map((attribute) => {\n                                                        if (attribute.type === type) {\n                                                            return <li>\n                                                                <em>{type}</em> - {attribute.title}\n                                                            </li>\n                                                        }\n                                                    }\n                                                )}\n                                        </span>\n                                          )}\n                                          </ul>\n                                      </li>\n                                  )}\n                                  </ul>\n                              </div>\n                          }\n                      )}\n\n                  </ul>\n              });\n              }\n            });\n\n\n    return (\n      <div className=\"App\">\n\n          <h2> {name} </h2>\n      <div><p><strong>Type:</strong> {type} </p><p><strong> URL: </strong> <a href=\"{url}\" target=\"_blank\">{url} </a></p></div>\n      <h3>Overview</h3>\n      <p>{Parser(description)} </p>\n      <h3>Learning Outcomes</h3>\n      <p> {Parser(learningOutcome)} </p>\n      <h3>Organizers/ Partners</h3>\n      <p> {Parser(organisers)}</p>\n      <h3>Provider</h3>\n          {provider}\n          <h3>Competency profile</h3>\n          {Profile}\n\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}